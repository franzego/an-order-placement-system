// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: store_query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkStock = `-- name: CheckStock :one
SELECT available_quantity 
FROM store 
WHERE id = $1
`

func (q *Queries) CheckStock(ctx context.Context, id int64) (pgtype.Numeric, error) {
	row := q.db.QueryRow(ctx, checkStock, id)
	var available_quantity pgtype.Numeric
	err := row.Scan(&available_quantity)
	return available_quantity, err
}

const getProduct = `-- name: GetProduct :one
SELECT id, product_name, available_quantity, price
FROM store
WHERE id = $1
`

type GetProductRow struct {
	ID                int64          `json:"id"`
	ProductName       string         `json:"product_name"`
	AvailableQuantity pgtype.Numeric `json:"available_quantity"`
	Price             pgtype.Numeric `json:"price"`
}

func (q *Queries) GetProduct(ctx context.Context, id int64) (GetProductRow, error) {
	row := q.db.QueryRow(ctx, getProduct, id)
	var i GetProductRow
	err := row.Scan(
		&i.ID,
		&i.ProductName,
		&i.AvailableQuantity,
		&i.Price,
	)
	return i, err
}

const releaseStock = `-- name: ReleaseStock :exec
UPDATE store
SET available_quantity = available_quantity + $1,
    reserved_quantity = reserved_quantity - $1
WHERE id = $2 AND reserved_quantity >= $1
`

type ReleaseStockParams struct {
	AvailableQuantity pgtype.Numeric `json:"available_quantity"`
	ID                int64          `json:"id"`
}

func (q *Queries) ReleaseStock(ctx context.Context, arg ReleaseStockParams) error {
	_, err := q.db.Exec(ctx, releaseStock, arg.AvailableQuantity, arg.ID)
	return err
}

const reserveStock = `-- name: ReserveStock :exec
UPDATE store 
SET available_quantity = available_quantity - $1,
    reserved_quantity = reserved_quantity + $1
WHERE id = $2 AND available_quantity >= $1
`

type ReserveStockParams struct {
	AvailableQuantity pgtype.Numeric `json:"available_quantity"`
	ID                int64          `json:"id"`
}

func (q *Queries) ReserveStock(ctx context.Context, arg ReserveStockParams) error {
	_, err := q.db.Exec(ctx, reserveStock, arg.AvailableQuantity, arg.ID)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: orders.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (user_id, total_amount, status_staus)
VALUES ($1, $2, $3)
RETURNING order_id, user_id, order_date, status_staus, total_amount, payment_id, created_at, updated_at
`

type CreateOrderParams struct {
	UserID      int32          `json:"user_id"`
	TotalAmount pgtype.Numeric `json:"total_amount"`
	StatusStaus string         `json:"status_staus"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder, arg.UserID, arg.TotalAmount, arg.StatusStaus)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.UserID,
		&i.OrderDate,
		&i.StatusStaus,
		&i.TotalAmount,
		&i.PaymentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders
WHERE order_id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, orderID int32) error {
	_, err := q.db.Exec(ctx, deleteOrder, orderID)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT order_id, user_id, order_date, status_staus, total_amount, payment_id, created_at, updated_at FROM orders
WHERE order_id = $1
`

func (q *Queries) GetOrder(ctx context.Context, orderID int32) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, orderID)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.UserID,
		&i.OrderDate,
		&i.StatusStaus,
		&i.TotalAmount,
		&i.PaymentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT order_id, user_id, order_date, status_staus, total_amount, payment_id, created_at, updated_at FROM orders
ORDER BY order_date DESC
LIMIT $1 OFFSET $2
`

type ListOrdersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrders(ctx context.Context, arg ListOrdersParams) ([]Order, error) {
	rows, err := q.db.Query(ctx, listOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.OrderID,
			&i.UserID,
			&i.OrderDate,
			&i.StatusStaus,
			&i.TotalAmount,
			&i.PaymentID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE orders
SET status_staus = $2, updated_at = now()
WHERE order_id = $1
RETURNING order_id, user_id, order_date, status_staus, total_amount, payment_id, created_at, updated_at
`

type UpdateOrderStatusParams struct {
	OrderID     int32  `json:"order_id"`
	StatusStaus string `json:"status_staus"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrderStatus, arg.OrderID, arg.StatusStaus)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.UserID,
		&i.OrderDate,
		&i.StatusStaus,
		&i.TotalAmount,
		&i.PaymentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: order_items.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addOrderItem = `-- name: AddOrderItem :one
INSERT INTO order_items (order_id, product_id, product_name, price, quantity)
VALUES ($1, $2, $3, $4, $5)
RETURNING order_item_id, order_id, product_id, product_name, price, quantity, subtotal
`

type AddOrderItemParams struct {
	OrderID     int32          `json:"order_id"`
	ProductID   int32          `json:"product_id"`
	ProductName string         `json:"product_name"`
	Price       pgtype.Numeric `json:"price"`
	Quantity    int32          `json:"quantity"`
}

func (q *Queries) AddOrderItem(ctx context.Context, arg AddOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRow(ctx, addOrderItem,
		arg.OrderID,
		arg.ProductID,
		arg.ProductName,
		arg.Price,
		arg.Quantity,
	)
	var i OrderItem
	err := row.Scan(
		&i.OrderItemID,
		&i.OrderID,
		&i.ProductID,
		&i.ProductName,
		&i.Price,
		&i.Quantity,
		&i.Subtotal,
	)
	return i, err
}

const deleteOrderItem = `-- name: DeleteOrderItem :exec
DELETE FROM order_items
WHERE order_item_id = $1
`

func (q *Queries) DeleteOrderItem(ctx context.Context, orderItemID int32) error {
	_, err := q.db.Exec(ctx, deleteOrderItem, orderItemID)
	return err
}

const listOrderItems = `-- name: ListOrderItems :many
SELECT order_item_id, order_id, product_id, product_name, price, quantity, subtotal FROM order_items
WHERE order_id = $1
`

func (q *Queries) ListOrderItems(ctx context.Context, orderID int32) ([]OrderItem, error) {
	rows, err := q.db.Query(ctx, listOrderItems, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.OrderItemID,
			&i.OrderID,
			&i.ProductID,
			&i.ProductName,
			&i.Price,
			&i.Quantity,
			&i.Subtotal,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
